global:
  size: demo
  image:
    repository: registry.erda.cloud/erda
    imagePullPolicy: IfNotPresent
  updateStrategy:
    type: RollingUpdate
  # Use this set to assign a list of default pullSecrets
  imagePullSecrets: [ ]
  # cluster access domain
  domain: erda.io
  kubernetes:
    serviceDNSDomain: cluster.local
    containerRuntime:

tags:
  worker: false
  master: true

erda:
  # the name of cluster which erda installed
  clusterName: local-cluster
  # masterCluster config
  masterCluster:
    domain:
    protocol:
  # operator defines image tag and resources used for erda operator
  operator:
    tag: "2.3"
    resources:
      requests:
        cpu: 10m
        memory: 10Mi
      limits:
        cpu: 100m
        memory: 128Mi
  # erda cluster config
  clusterConfig:
    # platform access protocol, e.g. http/https/http,https
    protocol: http
    # defined cluster type e.g. kubernetes, edas...
    clusterType: kubernetes
    # defined cluster global chart repo
    helmRepo:
      url:
      username:
      password:
    clusterAccessKey:
  # tags defines image tag used for erda component
  tags:
    init: 2.3-08231041
    erda: 2.3-alpha-20220823134548-e711028
    clusterAgent: 2.3-alpha-20220823054349-e711028
    uc: dice-1.1-20210630-f4d63b99
    ui: 2.2-20220627165007-f081b52

    telegraf: 2.1-alpha-20220701111459-bb386c0
    fluentBit: 2.1-alpha-20220818110042-c3aaeac
    analyzer:
      alert: 2.1.0-alpha-20220719072015-cd04f02
      error: 2.1.0-alpha-20220719072015-cd04f02
      metrics: 2.1.0-alpha-20220719072015-cd04f02
      tracing: 2.1.0-alpha-20220719072015-cd04f02
  # component defines replicas and resources config used for erda component
  component:
    clusterManager:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    collector:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    hepa:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    monitor:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    msp:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    streaming:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    ui:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    uc:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    cmp:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    erdaServer:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    dicehub:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerAlert:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerAlertTask:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerErrorInsight:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerErrorInsightTask:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerMetrics:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerMetricsTask:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerTracing:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    analyzerTracingTask:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    clusterAgent:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    clusterDialer:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    fluentBit:
      binds:
        docker_root:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    gittar:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    pipeline:
      replicas:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    telegraf:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    telegrafApp:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    telegrafPlatform:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:
    orchestrator:
      resources:
        cpu:
        mem:
        max_cpu:
        max_mem:

volume-provisioner:
  # tag defines volume-provisioner image tag.
  tag: 1.0.0-20210416-1a3758f
  # provisioner defines CSI volume provisioner
  provisioner:
    # local for erda local volume
    local:
      hostpath: /data
    # nfs for erda nfs volume
    nfs:
      hostpath: /netdata
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:

registry:
  # tag defines registry image tag.
  tag: 2.7.1
  # storageClassName defines which storageclass to use for creating PV in Kubernetes.
  storageClassName: "dice-local-volume"
  # capacity defines pvc capacity for registry instance (default: 1000Gi for prod mode and 50Gi for demo mode).
  capacity:
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
  custom:
    # deploy registry with host mode
    nodeName:
    nodeIP:
    # setting custom registry auth info
    address:
    username:
    password:


sonar:
  # tag defines sonar image tag.
  tag: 8.4.2
  # token defines sonar admin token (base64 encoded)
  token: LY9DepZ7iDUsyH8TFoDR85ok7y2nw1
  # password defines sonar admin token (base64 encoded)
  password: 78tE846484lQQFUwY51h0Yr96ZQ063
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:

kms:
  # tag defines kms image tag.
  tag: 1.3.0-alpha-20210903152500-a3196f34
  # replicas defines the number of kms instance.
  replicas:
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:

nexus:
  defaultAddress: maven.aliyun.com
  custom:
    address:
    username:
    password:

redis:
  # redisOperator defines image tag and resources used by redis operator instance.
  redisOperator:
    # tag defines redis operator image tag.
    tag: 1.0.0-20200723-1a7a9f14
    # resources defines resources requests and limits for redis operator pod
    resources:
      requests:
        cpu:
        memory:
      limits:
        cpu:
        memory:

  # redisFailover configuration
  redisFailover:
    # tag defines redis image tag.
    tag: 3.2.12
    secret: aUVWSUk2TFk2RWJyYzRIWA==
    # redis master-slave standby
    redis:
      # replicas defines the number of redis instance
      replicas:
      # resources defines resources requests and limits for redis instance pod
      resources:
        requests:
          cpu:
          memory:
        limits:
          cpu:
          memory:
    # redis sentinels
    sentinel:
      # replicas defines the number of redis sentinel instance
      replicas:
      # resources defines resources requests and limits for redis sentinel pod
      resources:
        requests:
          cpu:
          memory:
        limits:
          cpu:
          memory:


kafka:
  # tag defines kafka image tag.
  tag: 1.1.0-20210323-be01a9b
  # storageClassName defines which storageclass to use for creating PV in Kubernetes.
  storageClassName: "dice-local-volume"
  # capacity defines pvc capacity for kafka instance (default: 100Gi for prod mode and 16Gi for demo mode).
  capacity:
  # kafka JAVA_OPTS (java heap size suggests to set as 0.75 * resources.limits.memory. eg: "-Xmx6144m -Xms6144m" for resources.limits.memory is 8192Mi)
  javaOpts:
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:

cassandra:
  # disabled cassandra
  enabled: false
  # operatorImageTag defines cassandra-operator image tag.
  operatorImageTag: v1.1.3-release
  # cassandraImageTag defines cassandra image tag
  cassandraImageTag: 3.11.10
  # capacity defines pvc capacity for cassandra instance (default: 1000Gi for prod mode and 50Gi for demo mode)
  capacity:
  # storageClassName defines which storageclass to use for creating PV in Kubernetes.
  storageClassName: "dice-local-volume"
  resources:
    requests:
      # cpu defines cpu requests.
      cpu:
      # memory defines memory requests.
      memory:
    limits:
      # cpu defines cpu limits.
      cpu:
      # memory defines memory limits.
      memory:
  racks:
    # racks list
    - name: rack1
    - name: rack2
    - name: rack3

elasticsearch:
  # tag defines elasticsearch image tag.
  tag: 6.2.4
  # replicas defines the number of elasticsearch instances in 'prod' deployment mode
  replicas: 3
  # numberOfMasters defines the number of elasticsearch instances can be as master candidates in 'prod' deployment mode（must more than half of replicas + 1）
  numberOfMasters: 2
  # # storageClassName defines which storageclass to use for creating PV in Kubernetes.
  storageClassName: "dice-local-volume"
  # capacity defines pvc capacity for elasticsearch instance  (default: 1000Gi for prod mode and 50Gi for demo mode).
  capacity:
  # elasticsearch JAVA_OPTS (java heap size suggests to set as 0.75 * resources.limits.memory, eg: "-Xms6144m -Xmx6144m" for resources.limits.memory is 8192Mi)
  javaOpts:
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:

mysql:
  # tag defines mysql image tag.
  tag: 5.7.34
  # user defines the username Erda used to access mysql.
  user: erda
  # database defines the database name Erda used to access mysql.
  database: erda
  # password defines the password according to the username Erda used to access mysql.
  password: password
  # storageClassName defines which storageclass to use for creating PV in Kubernetes.
  storageClassName: "dice-local-volume"
  # capacity defines pvc capacity for myqsl instance  (default: 100Gi for prod mode and 10Gi for demo mode).
  capacity:
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
  custom:
    address:
    port:
    database:
    user:
    password:


zookeeper:
  # tag defines zookeeper image tag.
  tag: 3.4.13-monitor
  # storageClassName defines which storageclass to use for creating PV in Kubernetes.
  storageClassName: "dice-local-volume"
  # capacity defines pvc capacity for zookeeper instance (default: 32Gi for prod mode and 4Gi for demo mode)..
  capacity:
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:

etcd:
  # tag defines etcd image tag.
  tag: 3.3.15-0
  # storageClassName defines which storageclass to use for creating PV in Kubernetes.
  storageClassName: "dice-local-volume"
  # capacity defines pvc capacity for etcd instance (default: 32Gi for prod mode and 8Gi for demo mode).
  capacity:
  # resources defines resources requests and limits for pod
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
  tls:
    autoGenerated:
      enabled: false

buildkitd:
  existingConfigmap: "buildkitd-config"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: dice/job
                operator: Exists
  tls:
    autoGenerated:
      enabled: false

certgen:
  image:
    tag: 20220630093931-6bd9f18
  enabled: true
  rbac:
    create: true
  serviceAccount:
    create: true
    name: ""

