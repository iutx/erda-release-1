apiVersion: erda.terminus.io/v1beta1
kind: Erda
metadata:
  name: erda
  namespace: {{ .Release.Namespace }}
spec:
  {{- if not .Values.tags.worker }}
  customDomain:
    openapi: openapi.{{ .Values.global.domain }}
    ui: {{ .Values.global.domain }}, *.{{ .Values.global.domain }}
  {{- else }}
  mainPlatform:
    collector: {{ .Values.erda.masterCluster.protocol | default "https" }}://collector.{{ .Values.erda.masterCluster.domain }}
    openapi: {{ .Values.erda.masterCluster.protocol | default "https" }}://openapi.{{ .Values.erda.masterCluster.domain }}
    cluster-dialer: {{ .Values.erda.masterCluster.protocol | default "https" }}://cluster-dialer.{{ .Values.erda.masterCluster.domain }}
  {{- end }}
  cookieDomain: {{ .Values.global.domain }}
  platformDomain: {{ .Values.global.domain }}
  diceCluster: {{ .Values.erda.clusterName }}
  size: 'test'
  initJobs:
    version: "2.0"
    jobs:
      init-image:
        envs:
          TZ: Asia/Shanghai
          {{- if .Values.mysql.custom.address }}
          MIGRATION_MYSQL_HOST: {{ .Values.mysql.custom.address }}
          MIGRATION_MYSQL_PORT: "{{ .Values.mysql.custom.port }}"
          MIGRATION_MYSQL_USERNAME: {{ .Values.mysql.custom.user }}
          MIGRATION_MYSQL_PASSWORD: {{ .Values.mysql.custom.password }}
          MIGRATION_MYSQL_DBNAME: {{ .Values.mysql.custom.database }}
          {{- else }}
          MIGRATION_MYSQL_HOST: erda-mysql.{{ .Release.Namespace }}.svc.{{ .Values.global.kubernetes.serviceDNSDomain }}
          MIGRATION_MYSQL_PORT: "3306"
          MIGRATION_MYSQL_USERNAME:  {{ .Values.mysql.user }}
          MIGRATION_MYSQL_PASSWORD: {{ .Values.mysql.password }}
          MIGRATION_MYSQL_DBNAME: {{ .Values.mysql.database }}
          {{- end }}
          MIGRATION_DEBUGSQL: "false"
          MIGRATION_SKIP_LINT: "true"
          MIGRATION_SKIP_SANDBOX: "true"
        image: {{ .Values.global.image.repository }}/init-image:{{ .Values.erda.tags.init }}
        resources:
          cpu: 0.5
          mem: 128

  dice:
    version: "2.0"
    meta:
      ERDA_COMPONENT: ""
    envs:
      COLLECTOR_ADDR: collector:7076
      ETCDCTL_API: "3"
      MONITOR_ADDR: monitor:7096
      PIPELINE_ADDR: pipeline:3081
      ERDA_SERVER_ADDR: erda-server:9095
      MSP_ADDR: msp:8080
      DOP_ADDR: erda-server:9095
      OPENAPI_ADDR: erda-server:9529
      CMP_ADDR: cmp:9027
      ORCHESTRATOR_ADDR: orchestrator:8081
      OTEL_TRACES_ENABLED: false
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://collector:7076/api/otlp/v1/traces
      OTEL_TRACES_SAMPLER_ARG: 0.1
      CLUSTER_MANAGER_ADDR: cluster-manager:9094
      CLUSTER_DIALER_ADDR: cluster-manager:80
      TRACE_HOOK_ENABLE: true
    services:
      {{- if not .Values.tags.worker }}
      erda-server:
        cmd: /erda/cmd/erda-server/bin
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        ports:
        - port: 9529
          protocol: "TCP"
          l4_protocol: "TCP"
          expose: true
        - port: 9095
          protocol: TCP
          l4_protocol: TCP
          default: true
        - port: 8096
          protocol: TCP
          l4_protocol: TCP
        - port: 9432
          protocol: "TCP"
          l4_protocol: "TCP"
        - port: 9431
          protocol: "TCP"
          l4_protocol: "TCP"
        envs:
          DEBUG: "false"
          AVATAR_STORAGE_URL: "file:///avatars"
          CMDB_CONTAINER_TOPIC: "spot-metaserver_container"
          CMDB_GROUP: "spot_cmdb_group"
          CMDB_HOST_TOPIC: "spot-metaserver_host"
          LICENSE_KEY: "XWoPm8I3FZuDclhuOhZ+qRPVHjXKCwSgZEOTyrMgtJg6f0Kz7QR0CyVN1ZWgbiou/OyABe7HyK1yVxDdeP1JuXcfOoGOdChTyiQfP5sdXUbferq5UkK7S44lMjNmzURlbdX8smSa13+8FQyDqz2BpDcBKMRfn2kKuF4n6n9Ls7HyVV7oWSKreEyIH3991Ug2grNEpcKip3ISVY7eGJ3uoahC9zs4fla1dzR47e5dgppHtf5WBjFgiSS+5qRi2mYa"
          LISTEN_ADDR: ":9526"
          UC_CLIENT_ID: "dice"
          UC_CLIENT_SECRET: "secret"
          CREATE_ORG_ENABLED: "false"
          EXTENSION_MENU: "{\"流水线任务\":[\"source_code_management:代码管理\",\"build_management:构建管理\",\"deploy_management:部署管理\",\"version_management:版本管理\",\"test_management:测试管理\",\"data_management:数据治理\",\"custom_task:自定义任务\"],\"扩展服务\":[\"database:存储\",\"distributed_cooperation:分布式协作\",\"search:搜索\",\"message:消息\",\"content_management:内容管理\",\"security:安全\",\"traffic_load:流量负载\",\"monitoring&logging:监控&日志\",\"content:文本处理\",\"image_processing:图像处理\",\"document_processing:文件处理\",\"sound_processing:音频处理\",\"custom:自定义\",\"general_ability:通用能力\",\"new_retail:新零售能力\",\"srm:采供能力\",\"solution:解决方案\"]}"
          RELEASE_GC_SWITCH: "true"
          RELEASE_MAX_TIME_RESERVED: "72"
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: "ignore"
          UC_AUDITOR_CRON: "0 */1 * * * ?"
          UC_AUDITOR_PULL_SIZE: "30"
          ERDA_SERVER_ADDR: "localhost:9095"
          DOP_ADDR: "localhost:9095"
        resources:
          cpu: {{ .Values.erda.component.erdaServer.resources.cpu | default "0.5" }}
          mem: {{ .Values.erda.component.erdaServer.resources.mem | default "1024" }}
          {{- if eq .Values.global.size "demo" }}
          max_cpu: {{ .Values.erda.component.erdaServer.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.erdaServer.resources.max_mem | default "2048" }}
          {{- else }}
          max_cpu: {{ .Values.erda.component.erdaServer.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.erdaServer.resources.max_mem | default "2048" }}
          {{- end }}
          network:
            mode: container
        binds:
          - /netdata/avatars:/avatars:rw
          - /netdata/dice/cmdb/files:/files:rw
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.erdaServer.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.erdaServer.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: dice
        expose:
          - 9529
        health_check:
          http:
            port: 9095
            path: /api/healthy
            duration: 120
          exec: { }
      cluster-manager:
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/cluster-manager/bin
        ports:
          - port: 80
            protocol: TCP
            l4_protocol: TCP
          - port: 9094
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 9095
            protocol: TCP
            l4_protocol: TCP
        envs:
          DEBUG: "false"
        resources:
          cpu: {{ .Values.erda.component.clusterManager.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.clusterManager.resources.mem | default "128" }}
          {{- if eq .Values.global.size "demo" }}
          max_cpu: {{ .Values.erda.component.clusterManager.resources.max_cpu | default "0.1" }}
          max_mem: {{ .Values.erda.component.clusterManager.resources.max_mem | default "128" }}
          {{- else }}
          max_cpu: {{ .Values.erda.component.clusterManager.resources.max_cpu | default "0.2" }}
          max_mem: {{ .Values.erda.component.clusterManager.resources.max_mem | default "256" }}
          {{- end }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.clusterManager.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.clusterManager.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: dice
        health_check:
          http: { }
          exec: { }
      cmp:
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/cmp/bin
        ports:
          - port: 9027
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 9029
            protocol: "TCP"
            l4_protocol: "TCP"
        envs:
          ERDA_HELM_CHART_VERSION: 1.1.0
          ERDA_NAMESPACE: {{ .Release.Namespace }}
          UC_CLIENT_ID: dice
          UC_CLIENT_SECRET: secret
        resources:
          cpu: {{ .Values.erda.component.cmp.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.cmp.resources.mem | default "1024" }}
          max_cpu: {{ .Values.erda.component.cmp.resources.max_cpu | default "1" }}
          {{- if ne .Values.global.size "demo" }}
          max_mem: {{ .Values.erda.component.cmp.resources.max_mem | default "3072" }}
          {{- else }}
          max_mem: {{ .Values.erda.component.cmp.resources.max_mem | default "1024" }}
          {{- end }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.cmp.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.cmp.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: dice
        health_check:
          http: { }
          exec: { }
      collector:
        labels:
          cpu_bound: "true"
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/monitor/collector/bin
        ports:
          - port: 7076
            protocol: TCP
            l4_protocol: TCP
            expose: true
            default: false
          - port: 7098
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: "ignore"
          COLLECTOR_BROWSER_SAMPLING_RATE: "100"
          COLLECTOR_ENABLE: "true"
        resources:
          cpu: {{ .Values.erda.component.collector.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.collector.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.collector.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.collector.resources.max_mem | default "1024" }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.collector.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.collector.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: spot-v2
        expose:
          - 7076
        health_check:
          http:
            port: 7076
            path: /api/health
            duration: 120
          exec: { }
      gittar:
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/gittar/bin
        ports:
          - port: 5566
            protocol: TCP
            l4_protocol: TCP
            expose: true
            default: false
        envs:
          GITTAR_BRANCH_FILTER: master,develop,feature/*,support/*,release/*,hotfix/*
          GITTAR_PORT: "5566"
          UC_CLIENT_ID: dice
          UC_CLIENT_SECRET: secret
        resources:
          cpu: {{ .Values.erda.component.gittar.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.gittar.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.gittar.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.gittar.resources.max_mem | default "1536" }}
          network:
            mode: container
        binds:
          - /netdata/gittar:/repository:rw
        deployments:
          replicas: 1
          labels:
            GROUP: devops
        expose:
          - 5566
        health_check:
          http: { }
          exec: { }
      hepa:
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/hepa/bin
        ports:
          - port: 8080
            protocol: TCP
            l4_protocol: TCP
            expose: true
            default: false
        resources:
          cpu: {{ .Values.erda.component.hepa.resources.cpu | default "0.1" }}
          {{- if eq .Values.global.size "demo" }}
          mem: {{ .Values.erda.component.hepa.resources.mem | default "128" }}
          {{- else }}
          mem: {{ .Values.erda.component.hepa.resources.mem | default "512" }}
          {{- end }}
          max_cpu: {{ .Values.erda.component.hepa.resources.max_cpu | default "0.5" }}
          {{- if .Values.erda.component.hepa.resources.max_mem }}
          max_mem: {{ .Values.erda.component.hepa.resources.max_mem }}
          {{- end }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.hepa.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.hepa.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: addons
        expose:
          - 8080
        health_check:
          http:
            port: 8080
            path: /health
            duration: 120
          exec: { }
      monitor:
        envs:
          LOG_LEVEL: INFO
          {{- if eq .Values.cassandra.enabled false }}
          QUERY_LOG_FROM_ES_ENABLE: true
          QUERY_LOG_FROM_K8S_API_ENABLE: true
          QUERY_EVENT_FROM_ES_ENABLE: true
          CASSANDRA_ENABLE: false
          QUERY_LOG_FROM_CASSANDRA_ENABLE: false
          {{- end }}
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/monitor/monitor/bin
        ports:
          - port: 7096
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 7098
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 7080
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        resources:
          cpu: {{ .Values.erda.component.monitor.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.monitor.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.monitor.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.monitor.resources.max_mem | default "1024" }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.monitor.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.monitor.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: spot-v2
        health_check:
          http:
            port: 7096
            path: /api/health
            duration: 120
          exec: { }
      msp:
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/msp/bin
        ports:
          - port: 8080
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 7080
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 9080
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          GOLANG_PROTOBUF_REGISTRATION_CONFLICT: ignore
          {{- if eq .Values.cassandra.enabled false }}
          QUERY_SPAN_FROM_ES_ENABLE: true
          QUERY_EVENT_FROM_ES_ENABLE: true
          QUERY_SPAN_FROM_CASSANDRA_ENABLE: false
          QUERY_EVENT_FROM_CASSANDRA_ENABLE: false
          CASSANDRA_ENABLE: false
          TRACE_QUERY_SOURCE: elasticsearch
          EXCEPTION_QUERY_SOURCE: elasticsearch
          {{- end }}
        resources:
          cpu: {{ .Values.erda.component.msp.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.msp.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.msp.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.msp.resources.max_mem | default "512" }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.msp.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.msp.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: msp
        health_check:
          http:
            port: 8080
            path: /health
            duration: 120
          exec: { }
      orchestrator:
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/orchestrator/bin
        ports:
          - port: 8081
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 7080
            protocol: "TCP"
            l4_protocol: "TCP"
        envs:
          CUSTOM_REGCRED_SECRET: aliyun-registry
          DEBUG: "false"
          TENANT_GROUP_KEY: 58dcbf490ef3
          ENABLE_SPECIFIED_K8S_NAMESPACE: {{ .Release.Namespace }}
        resources:
          cpu: {{ .Values.erda.component.orchestrator.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.orchestrator.resources.mem | default "256" }}
          max_cpu: {{ .Values.erda.component.orchestrator.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.orchestrator.resources.max_mem | default "2048" }}
          network:
            mode: container
        deployments:
          replicas: 1
          labels:
            GROUP: dice
        health_check:
          http:
            port: 8081
            path: /info
            duration: 120
          exec: { }
      pipeline:
        image: registry.erda.cloud/erda/erda:2.2-beta.4-20220629120025-f900638
        cmd: /erda/cmd/pipeline/bin
        ports:
          - port: 3081
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 30810
            protocol: "TCP"
            l4_protocol: "TCP"
        envs:
          CUSTOM_REGCRED_SECRET: aliyun-registry
          DEBUG: "false"
          PIPELINE_STORAGE_URL: file:///devops/storage
          REFRESH_CLUSTERS_INTERVAL: "1m"
        resources:
          cpu: {{ .Values.erda.component.pipeline.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.pipeline.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.pipeline.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.pipeline.resources.max_mem | default "1536" }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.pipeline.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.pipeline.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: devops
        health_check:
          http:
            port: 3081
            path: /ping
            duration: 120
          exec: { }
      streaming:
        labels:
          cpu_bound: "true"
        image:
          {{ .Values.global.image.repository }}/erda:{{ .Values.erda.tags.erda }}
        cmd: /erda/cmd/monitor/streaming/bin
        ports:
          - port: 7091
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 7098
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          BROWSER_ENABLE: "true"
          BROWSER_GROUP_ID: spot-monitor-browser
          LOG_GROUP_ID: spot-monitor-log
          LOG_STORE_ENABLE: "true"
          LOG_TTL: 168h
          METRIC_ENABLE: "true"
          METRIC_GROUP_ID: spot-monitor-metrics
          METRIC_INDEX_TTL: 192h
          TRACE_ENABLE: "true"
          TRACE_GROUP_ID: spot-monitor-trace
          TRACE_TTL: 168h
          LOG_LEVEL: INFO
          EVENT_GROUP_ID: "spot-monitor-event"
          ENTITY_GROUP_ID: "spot-monitor-entity"
          {{- if eq .Values.cassandra.enabled false }}
          WRITE_LOG_TO_ES_ENABLE: true
          WRITE_EVENT_TO_ES_ENABLE: true
          WRITE_SPAN_TO_ES_ENABLE: true
          CASSANDRA_ENABLE: false
          WRITE_LOG_TO_CASSANDRA_ENABLE: false
          WRITE_SPAN_TO_CASSANDRA_ENABLE: false
          {{- end }}
        resources:
          cpu: {{ .Values.erda.component.streaming.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.streaming.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.streaming.resources.max_cpu | default "1.5" }}
          max_mem: {{ .Values.erda.component.streaming.resources.max_mem | default "2048" }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.streaming.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.streaming.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: spot-v2
        health_check:
          http:
            port: 7091
            path: /api/health
            duration: 120
          exec: { }
      {{- end }}
      cluster-agent:
        image:
          {{ .Values.global.image.repository }}/cluster-agent:{{ .Values.erda.tags.clusterAgent }}
        cmd: /erda/cmd/cluster-agent/bin
        envs:
          DEBUG: "false"
        resources:
          cpu: {{ .Values.erda.component.clusterAgent.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.clusterAgent.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.clusterAgent.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.clusterAgent.resources.max_mem | default "1024" }}
          network:
            mode: container
        deployments:
          replicas: 1
          labels:
            GROUP: dice
        health_check:
          http: { }
          exec:
            cmd: ls
        k8s_snippet:
          container:
            securityContext:
              privileged: true
    addons: { }
    values: { }

  {{- if not .Values.tags.worker }}
  diceUI:
    version: "2.0"
    meta:
      ERDA_COMPONENT: ""
    envs: { }
    services:
      ui:
        image:
          {{ .Values.global.image.repository }}/ui-ce:{{ .Values.erda.tags.ui }}
        ports:
          - port: 80
            protocol: TCP
            l4_protocol: TCP
            expose: true
            default: false
        envs:
          COLLECTOR_ADDR: collector:7076
          COLLECTOR_PUBLIC_ADDR: collector:7076
          ENABLE_BIGDATA: "false"
          ENABLE_EDGE: "false"
          ENABLE_GALLERY: "true"
          GITTAR_ADDR: gittar:5566
          KRATOS_ADDR: "kratos-public"
          OPENAPI_ADDR: openapi:9529
          SCHEDULER_ADDR: scheduler:9091
          TA_ENABLE: "true"
          TERMINUS_KEY: c891011d-6115-11e9-9fe6-6c92bf3144c3
          UC_ADDR: uc:8080
          UC_PUBLIC_URL: ""
        resources:
          cpu: {{ .Values.erda.component.ui.resources.cpu | default "0.2" }}
          mem: {{ .Values.erda.component.ui.resources.mem | default "256" }}
          max_cpu: {{ .Values.erda.component.ui.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.ui.resources.max_mem | default "512" }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.ui.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.ui.replicas | default "2" }}
          {{- end }}
        expose:
          - 80
        health_check:
          http:
            port: 80
            path: "/_api/health"
            duration: 120
          exec: { }
    addons: { }
    values: { }
  spotAnalyzer:
    version: "2"
    meta:
      ERDA_COMPONENT: ""
    envs:
      AKKA_ASK_TIMEOUT: 60s
      AKKA_FRAMESIZE: 268435456b
      AKKA_LOOKUP_TIMEOUT: 60s
      AKKA_TCP_TIMEOUT: 60s
      ANALYZER_ALERT_ADDR: analyzer-alert:8081
      ANALYZER_ERROR_INSIGHT_ADDR: analyzer-error-insight:8081
      ANALYZER_METRICS_ADDR: analyzer-metrics:8081
      ANALYZER_TRACING_ADDR: "analyzer-tracing:8081"
      CMDB_ADDR: cmdb:9093
      EVENTBOX_ADDR: eventbox:9528
      FLINK_ENV_JAVA_OPTS_TM: "-XX:+UseG1GC"
      HEARTBEAT_TIMEOUT: "60000"
      JOB_MANAGER_HEAP_SIZE: 700m
      MONITOR_ADDR: monitor:7096
      PARALLELISM_DEFAULT: "2"
      RESOURCEMANAGER_JOB_TIMEOUT: 10minutes
      RESOURCEMANAGER_TASKMANAGER_TIMEOUT: "30000"
      TASK_MANAGER_MEM_PREALLOCATION: "true"
      TASK_MANAGER_NUMBER_OF_TASK_SLOTS: "2"
      TASK_MANAGER_MEMORY_MANAGED_FRACTION: "0.1"
      TASK_MANAGER_MEMORY_JVM_METASPACE_SIZE: "256M"
      TASK_MANAGER_JVM_EXIT_OOM: "true"
    services:
      analyzer-alert:
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-alert:{{ .Values.erda.tags.analyzer.alert }}
        cmd: flink-entrypoint.sh jobcluster --job-classname cloud.erda.analyzer.alert.Main
        ports:
          - port: 8081
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6123
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6124
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6125
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          GROUP_ID: spot-analyzer-alert
          JOB_MANAGER_NAME: self
          SELF_ADDR: analyzer-alert:8081
          STATE_BACKEND_ROCKSDB_LOCALDIR: /tmp/rocksdb
          STREAM_CHECKPOINT_ENABLE: "true"
          STREAM_CHECKPOINT_INTERVAL: "120000"
          STREAM_PARALLELISM_INPUT: "2"
          STREAM_PARALLELISM_OPERATOR: "2"
          STREAM_PARALLELISM_OUTPUT: "2"
          STREAM_STATE_BACKEND: jobmanager
          STREAM_STATE_BACKEND_FS_PATH: file:///data/checkpoints
          {{- if eq .Values.cassandra.enabled false }}
          WRITE_EVENT_TO_ES_ENABLE: true
          {{- end }}
        resources:
          cpu: {{ .Values.erda.component.analyzerAlert.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerAlert.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerAlert.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.analyzerAlert.resources.max_mem | default "2048" }}
          network:
            mode: container
        binds:
          - /netdata/spot-v2/analyzer/alert:/data:rw
        deployments:
          replicas: 1
        health_check:
          http:
            port: 8081
            path: /jobmanager/config
            duration: 120
          exec: { }
      analyzer-alert-task:
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-alert:{{ .Values.erda.tags.analyzer.alert }}
        cmd: flink-entrypoint.sh taskmanager
        ports:
          - port: 6121
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6122
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6125
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          JOB_MANAGER_NAME: analyzer_alert
          TASK_MANAGER_MEMORY_PROCESS_SIZE: 1843m
        resources:
          cpu: {{ .Values.erda.component.analyzerAlertTask.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerAlertTask.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerAlertTask.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.analyzerAlertTask.resources.max_mem | default "2048" }}
          network:
            mode: container
        binds:
          - /netdata/spot-v2/analyzer/alert:/data:rw
        deployments:
          replicas: 1
        health_check:
          http: { }
          exec:
            cmd: ps aux | grep TaskManagerRunner || exit 1
            duration: 120
      analyzer-error-insight:
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-error-insight:{{ .Values.erda.tags.analyzer.error }}
        cmd: flink-entrypoint.sh jobcluster --job-classname cloud.erda.analyzer.errorInsight.Main
        ports:
          - port: 8081
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6123
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6124
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6125
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          CASSANDRA_BATCHSIZE: "10"
          GROUP_ID: spot-analyzer-error-insight
          JOB_MANAGER_NAME: self
          SELF_ADDR: analyzer-error-insight:8081
          STREAM_PARALLELISM_INPUT: "2"
          STREAM_PARALLELISM_OPERATOR: "2"
          STREAM_PARALLELISM_OUTPUT: "2"
          {{- if eq .Values.cassandra.enabled false }}
          WRITE_EVENT_TO_ES_ENABLE: true
          {{- end }}
        resources:
          cpu: {{ .Values.erda.component.analyzerErrorInsight.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerErrorInsight.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerErrorInsight.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.analyzerErrorInsight.resources.max_mem | default "2048" }}
          network:
            mode: container
        binds:
          - /netdata/spot-v2/analyzer/error-insight:/data:rw
        deployments:
          replicas: 1
        health_check:
          http:
            port: 8081
            path: /jobmanager/config
            duration: 120
          exec: { }
      analyzer-error-insight-task:
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-error-insight:{{ .Values.erda.tags.analyzer.error }}
        cmd: flink-entrypoint.sh taskmanager
        ports:
          - port: 6121
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6122
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6125
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          JOB_MANAGER_NAME: analyzer_error_insight
          TASK_MANAGER_MEMORY_PROCESS_SIZE: 1843m
        resources:
          cpu: {{ .Values.erda.component.analyzerErrorInsightTask.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerErrorInsightTask.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerErrorInsightTask.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.analyzerErrorInsightTask.resources.max_mem | default "2048" }}
          network:
            mode: container
        binds:
          - /netdata/spot-v2/analyzer/error-insight:/data:rw
        deployments:
          replicas: 1
        health_check:
          http: { }
          exec:
            cmd: ps aux | grep TaskManagerRunner || exit 1
            duration: 120
      analyzer-metrics:
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-metrics:{{ .Values.erda.tags.analyzer.metrics }}
        cmd: flink-entrypoint.sh jobcluster --job-classname cloud.erda.analyzer.metrics.Main
        ports:
          - port: 8081
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6123
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6124
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6125
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          GROUP_ID: spot-analyzer-metrics
          JOB_MANAGER_NAME: self
          PARALLELISM_DEFAULT: "4"
          SELF_ADDR: analyzer-metrics:8081
          STATE_BACKEND_ROCKSDB_LOCALDIR: /tmp/rocksdb
          STREAM_CHECKPOINT_ENABLE: "false"
          STREAM_CHECKPOINT_INTERVAL: "120000"
          STREAM_PARALLELISM_INPUT: "4"
          STREAM_PARALLELISM_OPERATOR: "4"
          STREAM_PARALLELISM_OUTPUT: "4"
          STREAM_STATE_BACKEND: jobmanager
          STREAM_STATE_BACKEND_FS_PATH: file:///data/checkpoints
        resources:
          cpu: {{ .Values.erda.component.analyzerMetrics.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerMetrics.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerMetrics.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.analyzerMetrics.resources.max_mem | default "2048" }}
          network:
            mode: container
        binds:
          - /netdata/spot-v2/analyzer/metrics:/data:rw
        deployments:
          replicas: 1
        health_check:
          http:
            port: 8081
            path: /jobmanager/config
            duration: 120
          exec: { }
      analyzer-metrics-task:
        labels:
          cpu_bound: "true"
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-metrics:{{ .Values.erda.tags.analyzer.metrics }}
        cmd: flink-entrypoint.sh taskmanager
        ports:
          - port: 6121
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6122
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6125
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          JOB_MANAGER_NAME: analyzer_metrics
          TASK_MANAGER_MEMORY_PROCESS_SIZE: 1843m
        resources:
          cpu: {{ .Values.erda.component.analyzerMetricsTask.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerMetricsTask.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerMetricsTask.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.analyzerMetricsTask.resources.max_mem | default "2048" }}
          network:
            mode: container
        binds:
          - /netdata/spot-v2/analyzer/metrics:/data:rw
        deployments:
          replicas: {{ .Values.erda.component.analyzerMetricsTask.replicas | default "2" }}
        health_check:
          http: { }
          exec:
            cmd: ps aux | grep TaskManagerRunner || exit 1
            duration: 120
      analyzer-tracing:
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-tracing:{{ .Values.erda.tags.analyzer.tracing }}
        cmd: flink-entrypoint.sh jobcluster --job-classname cloud.erda.analyzer.tracing.Main
        resources:
          cpu: {{ .Values.erda.component.analyzerTracing.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerTracing.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerTracing.resources.max_cpu | default "0.5" }}
          max_mem: {{ .Values.erda.component.analyzerTracing.resources.max_mem | default "1024" }}
        deployments:
          replicas: 1
        health_check:
          http:
            port: 8081
            path: /jobmanager/config
            duration: 120
        ports:
          - 8081
          - 6123
          - 6124
          - 6125
        binds:
          - /netdata/spot-v2/analyzer/tracing:/data:rw
        envs:
          SELF_ADDR: "analyzer-tracing:8081"
          JOB_MANAGER_NAME: self
          PARALLELISM_DEFAULT: "4"
          STREAM_PARALLELISM_INPUT: "4"
          STREAM_PARALLELISM_OPERATOR: "4"
          STREAM_PARALLELISM_OUTPUT: "4"
          STREAM_CHECKPOINT_ENABLE: "false"
          STREAM_CHECKPOINT_INTERVAL: "120000"
          STREAM_STATE_BACKEND: "jobmanager"
          STREAM_STATE_BACKEND_FS_PATH: "file:///data/checkpoints"
          STATE_BACKEND_ROCKSDB_LOCALDIR: "/tmp/rocksdb"
          GROUP_ID: "spot-analyzer-tracing"

      analyzer-tracing-task:
        labels:
          cpu_bound: "true"
        image:
          {{ .Values.global.image.repository }}/erda-analyzer-tracing:{{ .Values.erda.tags.analyzer.tracing }}
        cmd: flink-entrypoint.sh taskmanager
        resources:
          cpu: {{ .Values.erda.component.analyzerTracingTask.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.analyzerTracingTask.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.analyzerTracingTask.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.analyzerTracingTask.resources.max_mem | default "2048" }}
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.analyzerTracingTask.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.analyzerTracingTask.replicas | default "2" }}
          {{- end }}
        ports:
          - 6121
          - 6122
          - 6125
        health_check:
          exec:
            cmd: "ps aux | grep TaskManagerRunner || exit 1"
            duration: 120
        binds:
          - /netdata/spot-v2/analyzer/tracing:/data:rw
        envs:
          JOB_MANAGER_NAME: analyzer_tracing
          TASK_MANAGER_MEMORY_PROCESS_SIZE: 1843m
    addons: { }
    values: { }
  uc:
    version: "2.0"
    meta:
      ERDA_COMPONENT: ""
    envs: { }
    services:
      uc:
        image:
          {{ .Values.global.image.repository }}/uc:{{ .Values.erda.tags.uc }}
        ports:
          - port: 8080
            protocol: TCP
            l4_protocol: TCP
            expose: true
            default: false
        envs:
          REDIRECT_URL_WHITE_LIST: http://uc.{{ .Values.global.domain }}/oauth/authorize,https://uc.{{ .Values.global.domain }}/oauth/authorize
          SPRING_PROFILES_ACTIVE: docker
          SMS_ENABLE_NOTICE_MOCK: "false"
          JAVA_OPTS: -Xms1433m -Xmx1433m
        resources:
          cpu: {{ .Values.erda.component.uc.resources.cpu | default "0.01" }}
          mem: {{ .Values.erda.component.uc.resources.mem | default "100" }}
          max_cpu: {{ .Values.erda.component.uc.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.uc.resources.max_mem | default "2048" }}
          network:
            mode: container
        deployments:
          {{- if eq .Values.global.size "demo" }}
          replicas: {{ .Values.erda.component.uc.replicas | default "1" }}
          {{- else }}
          replicas: {{ .Values.erda.component.uc.replicas | default "2" }}
          {{- end }}
          labels:
            GROUP: dice
        health_check:
          http:
            port: 8080
            path: /health
            duration: 300
        expose:
          - 8080
    addons: { }
  {{- end }}

  spotTelegraf:
    version: "2"
    meta:
      ERDA_COMPONENT: ""
    envs: { }
    services:
      telegraf:
        image:
          {{ .Values.global.image.repository }}/erda-telegraf:{{ .Values.erda.tags.telegraf }}
        envs:
          CLUSTER_PATH: /rootfs/etc/cluster-node
          COLLECTOR_AUTH_PASSWORD: G$9767bP32drYFPWrK4XMLRMTatiM6cU
          COLLECTOR_AUTH_USERNAME: collector
          HOST_ETC: /rootfs/etc
          HOST_MOUNT_PREFIX: /rootfs
          HOST_PROC: /rootfs/proc
          HOST_SYS: /rootfs/sys
          HPROF_OUTPUT_PATH: /rootfs/tmp
          INPUT_DOCKER_TAG_KEYS: '[''DICE_*'', ''N?_DICE_*'', ''EDAS_*'', ''ADDON_ID'',
            ''N?_ADDON_ID'', ''TERMINUS_KEY'', ''TERMINUS_DEFINE_TAG'', ''MESOS_TASK_ID'',
            ''POD_IP'', ''io.kubernetes.pod.name'', ''io.kubernetes.pod.namespace'', ''io.kubernetes.pod.uid'']'
          INPUT_METASERVER_FIELD_KEYS: '[''DICE_*'', ''N?_DICE_*'', ''EDAS_*'', ''TERMINUS_DEFINE_TAG'',
            ''POD_IP'', ''io.kubernetes.pod.name'', ''io.kubernetes.pod.namespace'']'
          SADC_PATH: /usr/lib64/sa/sadc
          SADF_PATH: /usr/bin/sadf
        resources:
          cpu: {{ .Values.erda.component.telegraf.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.telegraf.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.telegraf.resources.max_cpu | default "0.5" }}
          max_mem: {{ .Values.erda.component.telegraf.resources.max_mem | default "512" }}
          network:
            mode: host
        binds:
          - /:/rootfs:ro
          - /tmp:/rootfs/tmp:rw
          - /run/udev:/run/udev:ro
        deployments:
          replicas: 1
          labels:
            GROUP: spot-v2
            PRIVILEGED: "true"
          workload: per_node
        health_check:
          http: { }
          exec:
            cmd: ps aux | grep telegraf || exit 1
            duration: 120
      telegraf-app:
        image:
          {{ .Values.global.image.repository }}/erda-telegraf:{{ .Values.erda.tags.telegraf }}
        ports:
          - port: 7086
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 7082
            protocol: UDP
            l4_protocol: UDP
            expose: false
            default: false
        envs:
          CLUSTER_PATH: /rootfs/etc/cluster-node
          COLLECTOR_AUTH_PASSWORD: G$9767bP32drYFPWrK4XMLRMTatiM6cU
          COLLECTOR_AUTH_USERNAME: collector
          TELEGRAF_CONFIG: telegraf-app
        resources:
          cpu: {{ .Values.erda.component.telegrafApp.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.telegrafApp.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.telegrafApp.resources.max_cpu | default "0.5" }}
          max_mem: {{ .Values.erda.component.telegrafApp.resources.max_mem | default "512" }}
          network:
            mode: host
        binds:
          - /:/rootfs:ro
        deployments:
          replicas: 1
          labels:
            GROUP: spot-v2
            PRIVILEGED: "true"
          workload: per_node
        health_check:
          http: { }
          exec:
            cmd: ps aux | grep telegraf || exit 1
            duration: 120
      telegraf-platform:
        image:
          {{ .Values.global.image.repository }}/erda-telegraf:{{ .Values.erda.tags.telegraf }}
        ports:
          - port: 8094
            protocol: UDP
            l4_protocol: UDP
            expose: false
            default: false
          - port: 8095
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 6963
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
          - port: 7180
            protocol: TCP
            l4_protocol: TCP
            expose: false
            default: false
        envs:
          CASSANDRA_EXPORTER_JMX_ADDR: addon-cassandra-exporter-jmx.default.svc.{{ .Values.global.kubernetes.serviceDNSDomain }}
          CASSANDRA_JOLOKIA_PORT: "8778"
          CLUSTER_PATH: /rootfs/etc/cluster-node
          COLLECTOR_AUTH_PASSWORD: G$9767bP32drYFPWrK4XMLRMTatiM6cU
          COLLECTOR_AUTH_USERNAME: collector
          HOST_ETC: /rootfs/etc
          HOST_MOUNT_PREFIX: /rootfs
          HOST_PROC: /rootfs/proc
          HOST_SYS: /rootfs/sys
          HPROF_OUTPUT_PATH: /rootfs/tmp
          KAFKA_JOLOKIA_PORT: "8778"
          TELEGRAF_CONFIG: platform.alone
          TERMINUS_LOG_COLLECT: "false"
        resources:
          cpu: {{ .Values.erda.component.telegrafPlatform.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.telegrafPlatform.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.telegrafPlatform.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.telegrafPlatform.resources.max_mem | default "1536" }}
          network:
            mode: container
        binds:
          - /:/rootfs:ro
          - /netdata/dice-ops/dice-config/certificates:/netdata/dice-ops/dice-config/certificates:ro
        deployments:
          replicas: 1
          labels:
            GROUP: spot-v2
            PRIVILEGED: "true"
        health_check:
          http: { }
          exec:
            cmd: ps aux | grep telegraf || exit 1
            duration: 120
    addons:
      infos:
        plan: custom:basic
        options:
          version: 1.0.0
    values: { }
  fluentBit:
    version: "2.0"
    meta:
      ERDA_COMPONENT: ""
    envs: { }
    services:
      fluent-bit:
        image:
          {{ .Values.global.image.repository }}/erda-fluent-bit:{{ .Values.erda.tags.fluentBit }}
        envs:
          COLLECTOR_AUTH_PASSWORD: G$9767bP32drYFPWrK4XMLRMTatiM6cU
          COLLECTOR_AUTH_USERNAME: collector
        resources:
          cpu: {{ .Values.erda.component.fluentBit.resources.cpu | default "0.1" }}
          mem: {{ .Values.erda.component.fluentBit.resources.mem | default "128" }}
          max_cpu: {{ .Values.erda.component.fluentBit.resources.max_cpu | default "1" }}
          max_mem: {{ .Values.erda.component.fluentBit.resources.max_mem | default "512" }}
          network:
            mode: container
        binds:
          - {{ .Values.erda.component.fluentBit.binds.docker_root | default "/var/lib/docker" }}/containers:{{ .Values.erda.component.fluentBit.binds.docker_root | default "/var/lib/docker" }}/containers:ro
          - /data/spot-v2/fluent-bit:/data/spot/fluent-bit:rw
          - /var/log:/var/log:ro
        deployments:
          replicas: 1
          labels:
            GROUP: spot-v2
          workload: per_node
        health_check:
          http:
            port: 2020
            path: /
            duration: 120
    addons:
      infos:
        plan: custom:basic
        options:
          version: 1.0.0
    values: { }